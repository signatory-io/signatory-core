package ecdsa

import (
	hexenc "encoding/hex"
	"math/big"

	"github.com/signatory-io/signatory-core/crypto"
	"github.com/signatory-io/signatory-core/crypto/cose"
)

type Curve cose.Curve

const (
	NIST_P256       = Curve(cose.CrvP256)
	NIST_P384       = Curve(cose.CrvP384)
	NIST_P521       = Curve(cose.CrvP521)
	Secp256k1       = Curve(cose.CrvSecp256k1)
	BrainpoolP256r1 = Curve(cose.CrvBrainpoolP256r1)
	BrainpoolP320r1 = Curve(cose.CrvBrainpoolP320r1)
	BrainpoolP384r1 = Curve(cose.CrvBrainpoolP384r1)
	BrainpoolP512r1 = Curve(cose.CrvBrainpoolP512r1)
)

func (c Curve) IsValid() bool {
	return c.Algorithm() != 0
}

func (c Curve) String() string {
	return cose.Curve(c).String()
}

func (c Curve) Algorithm() crypto.Algorithm {
	switch c {
	case NIST_P256:
		return crypto.ECDSA_P256
	case NIST_P384:
		return crypto.ECDSA_P384
	case NIST_P521:
		return crypto.ECDSA_P521
	case Secp256k1:
		return crypto.ECDSA_Secp256k1
	case BrainpoolP256r1:
		return crypto.ECDSA_BrainpoolP256r1
	case BrainpoolP320r1:
		return crypto.ECDSA_BrainpoolP320r1
	case BrainpoolP384r1:
		return crypto.ECDSA_BrainpoolP384r1
	case BrainpoolP512r1:
		return crypto.ECDSA_BrainpoolP512r1
	default:
		return 0
	}
}

func (c Curve) FieldBytes() int {
	switch c {
	case NIST_P256:
		return 32
	case NIST_P384:
		return 48
	case NIST_P521:
		return 66
	case Secp256k1:
		return 32
	case BrainpoolP256r1:
		return 32
	case BrainpoolP320r1:
		return 40
	case BrainpoolP384r1:
		return 48
	case BrainpoolP512r1:
		return 64
	default:
		return 0
	}
}

func hex(src string) *big.Int {
	v, ok := new(big.Int).SetString(src, 16)
	if !ok {
		panic("invalid hex value")
	}
	return v
}

func (c Curve) P() *big.Int {
	switch c {
	case NIST_P256:
		return hex("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF")
	case NIST_P384:
		return hex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF")
	case NIST_P521:
		return hex("01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF")
	case Secp256k1:
		return hex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F")
	case BrainpoolP256r1:
		return hex("A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E5377")
	case BrainpoolP320r1:
		return hex("D35E472036BC4FB7E13C785ED201E065F98FCFA6F6F40DEF4F92B9EC7893EC28FCD412B1F1B32E27")
	case BrainpoolP384r1:
		return hex("8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B412B1DA197FB71123ACD3A729901D1A71874700133107EC53")
	case BrainpoolP512r1:
		return hex("AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3")
	default:
		panic("undefined curve")
	}
}

func (c Curve) N() *big.Int {
	switch c {
	case NIST_P256:
		return hex("FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551")
	case NIST_P384:
		return hex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973")
	case NIST_P521:
		return hex("01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409")
	case Secp256k1:
		return hex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141")
	case BrainpoolP256r1:
		return hex("A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A7")
	case BrainpoolP320r1:
		return hex("D35E472036BC4FB7E13C785ED201E065F98FCFA5B68F12A32D482EC7EE8658E98691555B44C59311")
	case BrainpoolP384r1:
		return hex("8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B31F166E6CAC0425A7CF3AB6AF6B7FC3103B883202E9046565")
	case BrainpoolP512r1:
		return hex("AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069")
	default:
		panic("undefined curve")
	}
}

func (c Curve) A() *big.Int {
	switch c {
	case NIST_P256:
		return hex("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC")
	case NIST_P384:
		return hex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC")
	case NIST_P521:
		return hex("01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC")
	case Secp256k1:
		return big.NewInt(0)
	case BrainpoolP256r1:
		return hex("7D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9")
	case BrainpoolP320r1:
		return hex("3EE30B568FBAB0F883CCEBD46D3F3BB8A2A73513F5EB79DA66190EB085FFA9F492F375A97D860EB4")
	case BrainpoolP384r1:
		return hex("7BC382C63D8C150C3C72080ACE05AFA0C2BEA28E4FB22787139165EFBA91F90F8AA5814A503AD4EB04A8C7DD22CE2826")
	case BrainpoolP512r1:
		return hex("7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA")
	default:
		panic("undefined curve")
	}
}

func (c Curve) B() *big.Int {
	switch c {
	case NIST_P256:
		return hex("5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B")
	case NIST_P384:
		return hex("B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF")
	case NIST_P521:
		return hex("0051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00")
	case Secp256k1:
		return big.NewInt(7)
	case BrainpoolP256r1:
		return hex("26DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B6")
	case BrainpoolP320r1:
		return hex("520883949DFDBC42D3AD198640688A6FE13F41349554B49ACC31DCCD884539816F5EB4AC8FB1F1A6")
	case BrainpoolP384r1:
		return hex("04A8C7DD22CE28268B39B55416F0447C2FB77DE107DCD2A62E880EA53EEB62D57CB4390295DBC9943AB78696FA504C11")
	case BrainpoolP512r1:
		return hex("3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723")
	default:
		panic("undefined curve")
	}
}

func (c Curve) G() (x, y *big.Int) {
	sz := c.FieldBytes()
	switch c {
	case NIST_P256:
		return hexpt("046B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C2964FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", sz)
	case NIST_P384:
		return hexpt("04AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB73617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F", sz)
	case NIST_P521:
		return hexpt("0400C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66011839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650", sz)
	case Secp256k1:
		return hexpt("0479BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", sz)
	case BrainpoolP256r1:
		return hex("8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262"),
			hex("547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997")
	case BrainpoolP320r1:
		return hex("43BD7E9AFB53D8B85289BCC48EE5BFE6F20137D10A087EB6E7871E2A10A599C710AF8D0D39E20611"),
			hex("14FDD05545EC1CC8AB4093247F77275E0743FFED117182EAA9C77877AAAC6AC7D35245D1692E8EE1")
	case BrainpoolP384r1:
		return hex("1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10E8E826E03436D646AAEF87B2E247D4AF1E"),
			hex("8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129280E4646217791811142820341263C5315")
	case BrainpoolP512r1:
		return hex("81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822"),
			hex("7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892")
	default:
		panic("undefined curve")
	}
}

func uncompressedPoint(data []byte, sz int) (x, y *big.Int) {
	if len(data) != sz*2+1 || data[0] != 4 {
		panic("incorrect point data")
	}
	x = new(big.Int).SetBytes(data[1 : 1+sz])
	y = new(big.Int).SetBytes(data[1+sz:])
	return
}

func hexpt(data string, sz int) (x, y *big.Int) {
	buf, err := hexenc.DecodeString(data)
	if err != nil {
		panic(err)
	}
	return uncompressedPoint(buf, sz)
}

// YSquare returns Y^2
func (c Curve) YSquare(x *big.Int) *big.Int {
	// x^3
	yy := new(big.Int).Mul(x, x)
	yy.Mul(yy, x)

	// a*x
	x1 := new(big.Int).Mul(x, c.A())
	yy.Add(yy, x1)

	// b
	yy.Add(yy, c.B())
	yy.Mod(yy, c.P())
	return yy
}

func (c Curve) isOnCurve(x, y *big.Int) bool {
	p := c.P()
	if x.Sign() < 0 || x.Cmp(p) >= 0 ||
		y.Sign() < 0 || y.Cmp(p) >= 0 {
		return false
	}

	y2 := new(big.Int).Mul(y, y)
	y2.Mod(y2, p)

	return c.YSquare(x).Cmp(y2) == 0
}
